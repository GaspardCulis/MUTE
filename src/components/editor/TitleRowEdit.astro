---
import TextEdit from "./TextEdit.astro";

export interface Props {
  row_id: string;
  selected?: boolean;
}

const { row_id, selected } = Astro.props;
---

<div
  class="title-row-editor"
  data-row-id={row_id}
  data-selected={selected ? "true" : "false"}
>
  <div class="input-container">
    <TextEdit row_id={row_id} column_index={0} selected={selected} />
  </div>
  <button class="remove-button" type="button" style="display: none;">-</button>
  <button class="add-button" type="button">+</button>
</div>
<script>
  import Editor, { EditorVariable } from "../../lib/Editor";

  const editor = Editor.get();

  const row_editors = document.querySelectorAll(
    ".title-row-editor",
  ) as NodeListOf<HTMLDivElement>;

  for (const row_editor of row_editors) {
    // Variable initialisation
    const input_container = row_editor.querySelector(
      ".input-container",
    ) as HTMLDivElement;
    const remove_button = row_editor.querySelector(
      ".remove-button",
    ) as HTMLButtonElement;
    const add_button = row_editor.querySelector(
      ".add-button",
    ) as HTMLButtonElement;

    const row_id = row_editor.dataset.rowId as string;
    // @ts-ignore
    const row_text_var = editor.variables[row_id] as EditorVariable<StyledText>;
    let selected = row_editor.dataset.selected === "true";

    // Editor event listeners
    editor.variables["selection.title_row"].on("changed", (new_row_id) => {
      selected = row_id === new_row_id;
    });

    editor.variables["selection.font"].on("changed", (new_font) => {
      if (!selected) return;
      const new_row_text = row_text_var.get();
      new_row_text.font = new_font;
      row_text_var.set(new_row_text);
    });

    // UI event listeners
    add_button.addEventListener("click", () => {
      remove_button.style.display = "block";

      if (input_container.childElementCount / 2 > 12) {
        return;
      }

      // Span
      const span = document.createElement("span");
      span.style.width = "2px";
      span.style.backgroundColor = "#212421";
      span.style.marginRight = "1rem";
      span.style.marginLeft = "4px";

      input_container.appendChild(span);

      // TextEdit
      const text_edit = document.createElement("title-text-edit");
      text_edit.dataset.rowId = row_id;
      text_edit.dataset.columnIndex = `${
        input_container.childElementCount / 2
      }`;

      input_container.appendChild(text_edit);
    });

    remove_button.addEventListener("click", () => {
      const input_container = remove_button.parentElement?.querySelector(
        ".input-container",
      ) as HTMLDivElement;

      input_container.lastElementChild?.remove();
      input_container.lastElementChild?.remove();

      if (input_container.childElementCount === 1) {
        remove_button.style.display = "none";
      }
    });
  }
</script>
<style>
  .title-row-editor {
    display: flex;
    width: 100%;
  }

  .input-container {
    display: flex;
    justify-content: space-between;

    flex-grow: 1;
    margin-bottom: 1rem;
    padding-left: 1rem;
    padding-block: 0.6rem;
    background-color: #313131;
    outline: 4px solid #211c21;
    border-top: 8px solid #212421;
  }

  button {
    unset: all;
    min-width: 59px;
    height: 59px;

    margin-left: 4px;

    background-color: #ced2d6;
    outline: 4px solid #211c21;
    border: none;
    border-bottom: 8px solid #5a595a;

    font-size: 24px;
  }

  button:active {
    border-bottom: none;
    transform: translateY(8px);
    height: 51px;
  }
</style>
