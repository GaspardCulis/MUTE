---
export interface Props {
  row_id: string;
  column_index: number;
  selected?: boolean;
}

const { row_id, column_index, selected } = Astro.props;
---

<title-text-edit data-row-id={row_id} data-column-index={column_index}>
  <input
    type="text"
    class={`text-edit ${selected ? "selected" : ""}`}
    placeholder="Type some text..."
  />
</title-text-edit>
<script>
  import Editor, { EditorVariable } from "../../lib/Editor";

  const editor = Editor.get();

  class TextEdit extends HTMLElement {
    row_id: string = "";
    column_index: number = 0;

    constructor() {
      super();
    }

    connectedCallback() {
      this.row_id = this.dataset.rowId as string;
      this.column_index = parseInt(this.dataset.columnIndex as string);
      let input_element = this.querySelector("input") as HTMLInputElement;
      let dynamically_generated = false;

      if (input_element === null) {
        dynamically_generated = true;

        input_element = document.createElement("input");

        // Input element initialisation
        input_element.type = "text";
        input_element.classList.add("text_edit");
        input_element.placeholder = "Type some text...";
        this.appendChild(input_element);
      }

      console.debug(
        `TextEdit: Instanciated new TextEdit with row_id: ${this.row_id} and column_index: ${this.column_index}`,
      );

      // @ts-ignore
      const row_text_var = editor.variables[
        this.row_id
      ] as EditorVariable<StyledText>;

      const length = row_text_var.get().text.length;
      if (length >= this.column_index && dynamically_generated) {
        if (length === this.column_index) {
          const new_row_text = row_text_var.get();
          new_row_text.text.push({
            text: "",
            texture: editor.variables["selection.texture"].get(),
          });
          row_text_var.set(new_row_text);
        } else {
          throw Error("Styled text elements messesd up");
        }
      }

      input_element.value = row_text_var.get().text[this.column_index].text;

      input_element.addEventListener("input", () => {
        const new_row_text = row_text_var.get();
        new_row_text.text[this.column_index].text = input_element.value;
        row_text_var.set(new_row_text);
      });

      input_element.addEventListener("focus", () => {
        editor.variables["selection.title_row"].set(this.row_id);
        editor.variables["selection.title_column_index"].set(this.column_index);
      });

      const update_selected_state = () => {
        if (
          editor.variables["selection.title_row"].get() === this.row_id &&
          editor.variables["selection.title_column_index"].get() ===
            this.column_index
        ) {
          input_element.classList.add("selected");
        } else {
          input_element.classList.remove("selected");
        }
      };

      editor.variables["selection.title_row"].on(
        "changed",
        update_selected_state,
      );
      editor.variables["selection.title_column_index"].on(
        "changed",
        update_selected_state,
      );
    }

    disconnectedCallback() {
      // @ts-ignore
      const row_text_var = editor.variables[
        this.row_id
      ] as EditorVariable<StyledText>;

      const new_text = row_text_var.get();
      new_text.text.splice(this.column_index, 1);
      row_text_var.set(new_text);
    }
  }

  customElements.define("title-text-edit", TextEdit);
</script>
<style is:global>
  title-text-edit {
    flex-grow: 1;
  }

  title-text-edit > input {
    all: unset;
    min-width: 1ch;
    width: 100%;
  }

  title-text-edit > input.selected {
    text-decoration: underline;
  }
</style>
