---
export interface Props {
  row_id: string;
  column_index: number;
  selected?: boolean;
}

const { row_id, column_index, selected } = Astro.props;
---

<title-text-edit
  data-row-id={row_id}
  data-column-index={column_index}
  data-selected={selected ? "true" : "false"}
>
  <input
    type="text"
    name={`text-edit-${row_id}-${column_index}`}
    class={`text-edit ${selected ? "selected" : ""}`}
    placeholder="Type some text..."
  />
</title-text-edit>
<script>
  import Editor, { EditorVariable } from "../../lib/Editor";

  const editor = Editor.get();

  class TextEdit extends HTMLElement {
    row_id: string = "";
    column_index: number = 0;
    selected: boolean = false;
    // @ts-ignore
    input_element: HTMLInputElement;
    // @ts-ignore
    row_text_var: EditorVariable<StyledText>;
    current_font: string = "";

    constructor() {
      super();
    }

    connectedCallback() {
      this.row_id = this.dataset.rowId as string;
      this.column_index = parseInt(this.dataset.columnIndex as string);
      this.selected = this.dataset.selected === "true";
      this.input_element = this.querySelector("input") as HTMLInputElement;
      // @ts-ignore
      this.row_text_var = editor.variables[
        this.row_id
      ] as EditorVariable<StyledText>;
      this.current_font = this.row_text_var.get().font;
      let dynamically_generated = false;

      if (this.input_element === null) {
        dynamically_generated = true;

        this.input_element = document.createElement("input");

        // Input element initialisation
        this.input_element.type = "text";
        this.input_element.classList.add("text_edit");
        this.input_element.placeholder = "Type some text...";
        this.appendChild(this.input_element);
      }

      console.debug(
        `TextEdit: Instanciated new TextEdit with row_id: ${this.row_id} and column_index: ${this.column_index}`,
      );

      const length = this.row_text_var.get().text.length;
      if (length >= this.column_index && dynamically_generated) {
        if (length === this.column_index) {
          const new_row_text = this.row_text_var.get();
          new_row_text.text.push({
            text: "",
            texture: this.row_text_var.get().text[0].texture,
          });
          this.row_text_var.set(new_row_text);
        } else {
          throw Error("Styled text elements messesd up");
        }
      }

      this.input_element.value =
        this.row_text_var.get().text[this.column_index].text;

      this.input_element.addEventListener("input", () => {
        const new_row_text = this.row_text_var.get();
        new_row_text.text[this.column_index].text = this.input_element.value;
        this.row_text_var.set(new_row_text);
      });

      this.input_element.addEventListener("focus", () => {
        editor.variables["selection.title_row"].set(this.row_id);
        editor.variables["selection.title_column_index"].set(this.column_index);

        const styled_text = this.row_text_var.get();
        editor.variables["selection.texture"].set(
          styled_text.text[this.column_index].texture,
        );
        editor.variables["selection.font"].set(styled_text.font);
      });

      editor.variables["selection.title_row"].on(
        "changed",
        this.updateSelectedState,
      );
      editor.variables["selection.title_column_index"].on(
        "changed",
        this.updateSelectedState,
      );

      editor.variables["selection.texture"].on("changed", this.updateTexture);
    }

    public updateSelectedState = () => {
      this.selected =
        editor.variables["selection.title_row"].get() === this.row_id &&
        editor.variables["selection.title_column_index"].get() ===
          this.column_index;
      if (this.selected) {
        this.input_element.classList.add("selected");
      } else {
        this.input_element.classList.remove("selected");
      }
    };

    public updateTexture = (new_texture: string) => {
      if (this.row_text_var.get().font != this.current_font)
        this.current_font = this.row_text_var.get().font;
      else if (!this.selected) return;
      const new_row_text = this.row_text_var.get();
      new_row_text.text[this.column_index].texture = new_texture;
      this.row_text_var.set(new_row_text);
    };

    disconnectedCallback() {
      const new_text = this.row_text_var.get();
      new_text.text.splice(this.column_index, 1);
      this.row_text_var.set(new_text);

      // Remove event listeners
      editor.variables["selection.title_row"].off(
        "changed",
        this.updateSelectedState,
      );
      editor.variables["selection.title_column_index"].off(
        "changed",
        this.updateSelectedState,
      );

      editor.variables["selection.texture"].off("changed", this.updateTexture);
    }
  }

  customElements.define("title-text-edit", TextEdit);
</script>
<style is:global>
  title-text-edit {
    flex-grow: 1;
  }

  title-text-edit > input {
    all: unset;
    min-width: 1ch;
    width: 100%;
  }

  title-text-edit > input.selected {
    text-decoration: underline;
  }
</style>
