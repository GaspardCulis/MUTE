---

---

<div id="title-view"></div>
<script>
  import * as THREE from "three";
  import {
    createRenderer,
    createScene,
    createTitleText,
  } from "../lib/TitleRenderer.ts";
  import Font from "../lib/Font";
  import Editor from "../lib/Editor";

  const editor = Editor.get();

  const texture_loader = new THREE.TextureLoader();

  async function generateTitle(): Promise<THREE.Group> {
    const title_group = new THREE.Group();
    for (const row of ["top", "middle", "bottom"]) {
      // @ts-ignore
      const top_config = editor.variables[`title.${row}`].get() as StyledText;
      const text_group = await createTitleText(
        top_config.text,
        texture_loader,
        {
          font: await Font.load(top_config.font),
          // @ts-ignore
          type: row,
        },
      );

      title_group.add(text_group);
    }

    return title_group;
  }

  async function updateTitle(scene: THREE.Scene) {
    scene.clear();
    scene.add(await generateTitle());
  }

  function resizeRendererToDisplaySize(renderer: THREE.WebGLRenderer) {
    const canvas = renderer.domElement;
    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  const container = document.querySelector("#title-view") as HTMLDivElement;

  const w = container.clientWidth;
  const h = container.clientHeight;

  const renderer = createRenderer();
  container.appendChild(renderer.domElement);
  renderer.setPixelRatio(window.devicePixelRatio * 2);
  renderer.domElement.id = "renderer-canvas";

  const [scene, camera] = createScene(w, h);
  scene.add(await generateTitle());

  editor.variables["title.top"].on("changed", (_v) => updateTitle(scene));
  editor.variables["title.middle"].on("changed", (_v) => updateTitle(scene));
  editor.variables["title.bottom"].on("changed", (_v) => updateTitle(scene));

  function render() {
    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    renderer.render(scene, camera);

    requestAnimationFrame(() => {
      render();
    });
  }
  render();
</script>
<style>
  #title-view {
    width: 100%;
    aspect-ratio: 4;
  }
</style>
<style is:inline>
  #renderer-canvas {
    display: block;
    width: 100%;
    height: 100%;
  }
</style>
